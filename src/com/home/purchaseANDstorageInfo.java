
package com.home;

/**
 *
 * @author Hussain
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import com.login.adminhome;
import java.awt.event.KeyEvent;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
public class purchaseANDstorageInfo extends javax.swing.JFrame {

    /**
     * Creates new form purchaseANDstorageInfo
     */
    Connection con = null;
    PreparedStatement pst = null;
    private final String DB_URL = "jdbc:mysql://localhost/bbms";
    private final String DB_USER = "root";
    private final String DB_PASS = "adil";
    public purchaseANDstorageInfo() {
        initComponents();
        txtAmount.setText("");
        txtBloodGroup1.setSelectedIndex(-1);
    }

    public void clearTextFieldsData(){
        txtBloodGroup1.setSelectedIndex(-1);
        txtAmount.setText("");
        jLabel4.setText("");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton12 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        BloodGroup = new javax.swing.JLabel();
        Amount = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtBloodGroup1 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        txtAmount = new javax.swing.JTextField();
        jButton13 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton12.setBackground(new java.awt.Color(255, 102, 102));
        jButton12.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton12.setText("Display Blood Storage ");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 420, 254, -1));

        jButton11.setBackground(new java.awt.Color(255, 102, 102));
        jButton11.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton11.setText("Display Receiver  Requests");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 340, 310, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 102, -1, 310));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel1.setText("Email:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 60, 26));

        BloodGroup.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BloodGroup.setText("Blood Group:");
        getContentPane().add(BloodGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 153, 31));

        Amount.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        Amount.setText("Amount:");
        getContentPane().add(Amount, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, -1, -1));

        jButton6.setBackground(new java.awt.Color(0, 204, 204));
        jButton6.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jButton6.setText("Clear Table");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 452, 254, 30));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel2.setText("Check Blood Reciever Requests & Blood Storage: ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 420, 50));

        jButton3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton3.setText("Clear");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 290, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 106, 180, 30));

        jButton1.setBackground(new java.awt.Color(0, 153, 153));
        jButton1.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(204, 204, 255));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 450, 90, -1));

        txtBloodGroup1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtBloodGroup1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A+", "B+", "AB+", "A-", "B-", "AB-", "O+", "O-" }));
        getContentPane().add(txtBloodGroup1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 170, 178, -1));

        jButton2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton2.setText("Confirmation");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, -1, -1));

        jButton4.setBackground(new java.awt.Color(255, 102, 102));
        jButton4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton4.setText("Update Blood Storage");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 460, 250, -1));

        txtAmount.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 220, 180, 30));

        jButton13.setBackground(new java.awt.Color(255, 102, 102));
        jButton13.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton13.setText("Display Receiver Confrimation Requests");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton13, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 380, 310, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/bbms", "root", "adil");
            Statement st=con.createStatement();
            String query="SELECT * FROM bbms.blood_storage";
            ResultSet rs = st.executeQuery(query);
            ResultSetMetaData rsmd=rs.getMetaData();
            DefaultTableModel model=(DefaultTableModel) jTable1.getModel();

            int cols = rsmd.getColumnCount();
            String [] colName = new String[cols];
            for(int i=0; i<cols; i++)
            colName[i]=rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            String BloodGroup,Amount;

            while(rs.next()){
                //Email=rs.getString(1);

                BloodGroup=rs.getString(1);
                Amount=rs.getString(2);

                String[] row={BloodGroup,Amount};
                model.addRow(row);
            }

            st.close();
            con.close();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(adminhome.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(adminhome.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:

        try {
            // TODO add your handling code here:
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/bbms", "root", "adil");
            Statement st=con.createStatement();
            String query="SELECT BloodGroup,amount,Email FROM bbms.receiver_table";
            ResultSet rs = st.executeQuery(query);
            ResultSetMetaData rsmd=rs.getMetaData();
            DefaultTableModel model=(DefaultTableModel) jTable1.getModel();

            int cols = rsmd.getColumnCount();
            String [] colName = new String[cols];
            for(int i=0; i<cols; i++)
            colName[i]=rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            String BloodGroup,Amount,Email;

            while(rs.next()){
               

                BloodGroup=rs.getString(1);
                Amount=rs.getString(2);
                 Email=rs.getString(3);
                String[] row={BloodGroup,Amount,Email};
                model.addRow(row);
            }

            st.close();
            con.close();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(adminhome.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(adminhome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        
        int i = jTable1.getSelectedRow();
        TableModel model =jTable1.getModel();
        
        
        String BloodGroup=model.getValueAt(i, 0).toString();
            switch(BloodGroup){
                case "A+":
                    txtBloodGroup1.setSelectedIndex(0);
                    break;
                case "B+":
                    txtBloodGroup1.setSelectedIndex(1);
                    break; 
                case "AB+":
                    txtBloodGroup1.setSelectedIndex(2);
                    break; 
                case "A-":
                    txtBloodGroup1.setSelectedIndex(3);
                    break; 
                case "B-":
                    txtBloodGroup1.setSelectedIndex(4);
                    break; 
                case "AB-":
                    txtBloodGroup1.setSelectedIndex(5);
                    break; 
                case "O+":
                    txtBloodGroup1.setSelectedIndex(6);
                    break; 
                case "O-":
                    txtBloodGroup1.setSelectedIndex(7);
                    break; 
            }
            
            txtAmount.setText(model.getValueAt(i, 1).toString());
            
            jLabel4.setText(model.getValueAt(i, 2).toString());
            //jLabel3.setText(model.getValueAt(i, 2).toString());
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:

        jTable1.setModel(new DefaultTableModel());
         clearTextFieldsData();
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        clearTextFieldsData();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.hide();
        adminhome obj = new adminhome();
        obj.show();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
       
          /*
                if bloodgroup = O+ amount < storage bloodgroup amount
                msg = yes,we can provide you blood.
                        Contact:admin@gmail.com.
                                01704080389
            else
                msg=Sorry ,we dont have enough amount         
                        */ 
          
          
           int row = jTable1.getSelectedRow();
           String requestedBloodGroup = jTable1.getModel().getValueAt(row, 0).toString();
           String requestedEmail = jTable1.getModel().getValueAt(row, 2).toString();

                try {
                    Connection con = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
                    String query = "SELECT Amount FROM bbms.blood_storage WHERE BloodGroup = ?";
                    PreparedStatement pst = con.prepareStatement(query);
                    pst.setString(1, requestedBloodGroup);

                    ResultSet rs = pst.executeQuery();


                    String query1 = "SELECT amount FROM bbms.receiver_table WHERE BloodGroup = ?";
                    PreparedStatement pst1 = con.prepareStatement(query1);
                    pst1.setString(1, requestedBloodGroup);

                    ResultSet rs1 = pst1.executeQuery();
                    if (rs.next() && rs1.next()) {
                        int availableAmount = rs.getInt("Amount");
                        System.out.println(""+availableAmount);
                        int requestedAmount = rs1.getInt("amount"); // Example: Assume requested amount is 500 mL
                        System.out.println(""+requestedAmount);
                        if (availableAmount >= requestedAmount) {
                            //JOptionPane.showMessageDialog(this, "Blood available!");
                            try {
                                    // Establish database connection
                                    Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);

                                    // Check if the email already exists in the confirmation table
                                    String checkQuery = "SELECT COUNT(*) FROM receiver_confrimation_table WHERE Email = ?";
                                    PreparedStatement checkStmt = connection.prepareStatement(checkQuery);
                                    checkStmt.setString(1, requestedEmail);
                                    ResultSet resultSet = checkStmt.executeQuery();
                                    resultSet.next();
                                    int count = resultSet.getInt(1);

                                    if (count == 0) {
                                        // Email is unique, insert it into the confirmation table
                                        String insertQuery = "INSERT INTO receiver_confrimation_table (email) VALUES (?)";
                                        String insertQuery1 ="DELETE FROM receiver_table WHERE Email = ?";
                                        
                                        //String BlooodGroup = jTable1.getModel().getValueAt(row, 0).toString();
                                        String query2 = "UPDATE `blood_storage` SET `Amount` = `Amount` - ? WHERE `BloodGroup` = ?";

                                        PreparedStatement ps = con.prepareStatement(query2);
                                        ps.setString(1, txtAmount.getText());
                                        ps.setString(2, requestedBloodGroup);
                                        ps.executeUpdate();
                                        
                                        PreparedStatement insertStmt = connection.prepareStatement(insertQuery);
                                        insertStmt.setString(1, requestedEmail);
                                        PreparedStatement insertStmt1 = connection.prepareStatement(insertQuery1);
                                        insertStmt1.setString(1, requestedEmail);
                                        insertStmt1.executeUpdate();
                                        int rowsAffected = insertStmt.executeUpdate();
                                        if (rowsAffected > 0) {
                                            System.out.println("Email inserted successfully!");
                                            JOptionPane.showMessageDialog(null, "Blood available!  Email inserted successfully into Receiver confirmation table");
                                        } else {
                                            System.out.println("Error inserting email.");
                                            JOptionPane.showMessageDialog(null, "Error inserting email.");
                                        }
                                    } else {
                                        System.out.println("Email already exists in the receiver_table");
                                        JOptionPane.showMessageDialog(null, "Email already exists in the receiver_table.");
                                    }

                                    // Close resources
                                    resultSet.close();
                                    checkStmt.close();
                                    connection.close();
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                            //dh.setVisible(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "Not enough blood.");
                            //donorhome dh = new donorhome();
                            //dh.mess.setText("Not enough blood.");
                            //dh.setVisible(true);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Blood group not found.");
                         //donorhome dh = new donorhome();
                            //dh.mess.setText("Blood group not found.");
                            //dh.setVisible(true);
                    }

                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error checking availability: " + e.getMessage());
                }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost/bbms", "root", "adil");
                int row = jTable1.getSelectedRow();
                String BlooodGroup = jTable1.getModel().getValueAt(row, 0).toString();
                String query = "UPDATE `blood_storage` SET `Amount` = `Amount` + ? WHERE `BloodGroup` = ?";

                PreparedStatement pst = con.prepareStatement(query);
                pst.setString(1, txtAmount.getText());
                pst.setString(2, txtBloodGroup1.getSelectedItem().toString());
                pst.executeUpdate();

                JOptionPane.showMessageDialog(null, "Updated successfully!");
                clearTextFieldsData();
                jTable1.setModel(new DefaultTableModel());
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error updating data: " + e.getMessage());
            } catch (Exception ex) {
                Logger.getLogger(adminhome.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                // Close the connection (if needed)
                // con.close();
            }

        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        
        try {
            // TODO add your handling code here:
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/bbms", "root", "adil");
            Statement st=con.createStatement();
            String query="SELECT Email FROM bbms.receiver_confrimation_table";
            ResultSet rs = st.executeQuery(query);
            ResultSetMetaData rsmd=rs.getMetaData();
            DefaultTableModel model=(DefaultTableModel) jTable1.getModel();

            int cols = rsmd.getColumnCount();
            String [] colName = new String[cols];
            for(int i=0; i<cols; i++)
            colName[i]=rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            String Email;

            while(rs.next()){
               

                
                 Email=rs.getString(1);
                String[] row={Email};
                model.addRow(row);
            }

            st.close();
            con.close();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(adminhome.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(adminhome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(purchaseANDstorageInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(purchaseANDstorageInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(purchaseANDstorageInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(purchaseANDstorageInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new purchaseANDstorageInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Amount;
    private javax.swing.JLabel BloodGroup;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JComboBox<String> txtBloodGroup1;
    // End of variables declaration//GEN-END:variables
}
