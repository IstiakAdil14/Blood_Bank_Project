/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.home;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import com.login.LoginFrame;
import com.login.adminhome;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import static java.time.temporal.TemporalQueries.zoneId;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Hussain
 */
public class donorhome extends javax.swing.JFrame {

    //public String msg;
    //System.out.println(msg);
    /**
     * Creates new form donorhome
     */
    public donorhome() {
        initComponents();
    }
     public donorhome(String msg){
         initComponents();
          System.out.println("Email id : "+msg);
          jLabel3.setText(msg);
           jLabel3.setText(msg);
     }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        Donatebtn = new javax.swing.JButton();
        PurchaseBtn = new javax.swing.JButton();
        checkValidityOfDonateDate = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Notification = new javax.swing.JButton();
        Notification1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 102));
        setUndecorated(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("This is Home:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 105, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jButton3.setBackground(new java.awt.Color(255, 0, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jButton3.setText("Log Out");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        Donatebtn.setBackground(new java.awt.Color(0, 204, 204));
        Donatebtn.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        Donatebtn.setText("Donate");
        Donatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DonatebtnActionPerformed(evt);
            }
        });

        PurchaseBtn.setBackground(new java.awt.Color(0, 255, 255));
        PurchaseBtn.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        PurchaseBtn.setText("Receive");
        PurchaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PurchaseBtnActionPerformed(evt);
            }
        });

        checkValidityOfDonateDate.setBackground(new java.awt.Color(0, 102, 204));
        checkValidityOfDonateDate.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        checkValidityOfDonateDate.setText("Check Validity");
        checkValidityOfDonateDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkValidityOfDonateDateActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel2.setText("Email:");

        jLabel3.setBackground(new java.awt.Color(255, 204, 51));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N

        Notification.setBackground(new java.awt.Color(0, 255, 204));
        Notification.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        Notification.setText("Donation Notification");
        Notification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NotificationActionPerformed(evt);
            }
        });

        Notification1.setBackground(new java.awt.Color(0, 255, 204));
        Notification1.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        Notification1.setText("Receiving Notification");
        Notification1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Notification1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(154, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(PurchaseBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkValidityOfDonateDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Donatebtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(120, 120, 120)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(486, 486, 486))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(64, 64, 64))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Notification1)
                            .addComponent(Notification))
                        .addGap(130, 130, 130))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(Notification, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(Notification1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 173, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(52, 52, 52))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(Donatebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(PurchaseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(checkValidityOfDonateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        setVisible(false);
        LoginFrame a = new LoginFrame();
        a.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void checkValidityOfDonateDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkValidityOfDonateDateActionPerformed
        // TODO add your handling code here:
        String email = jLabel3.getText();

        //String email = "your_email_here"; // Replace with the actual email

        // Connect to your MySQL database (update URL, username, and password)
        String jdbcUrl = "jdbc:mysql://localhost:3306/bbms";
        String username = "root";
        String password = "adil";

        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
            String sql = "SELECT LastDonateDate from signup_table natural join userdetails where Email = ?";
            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setString(1, email);
                ResultSet rs = stmt.executeQuery();
                if (rs.next()) {
                    java.sql.Date registrationDate = rs.getDate("LastDonateDate");
                    if (registrationDate != null) {
                        LocalDate today = LocalDate.now();
                        LocalDate regDate = registrationDate.toLocalDate();
                        long daysDifference = today.toEpochDay() - regDate.toEpochDay();
                        if (daysDifference > 45) {
                            System.out.println("The registration date is more than 45 days ago.");
                            JOptionPane.showMessageDialog(null, "Congratulations! you are able to donate...");
                        } else {
                            System.out.println("The registration date is within 45 days.");
                            JOptionPane.showMessageDialog(null, "SORRY! you are not be able to donate...");
                        }
                    } else {
                        System.out.println("The registration date is null.");
                        JOptionPane.showMessageDialog(null, "Congratulations! you are able to donate...");
                    }
                } else {
                    System.out.println("No user found with the specified email.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_checkValidityOfDonateDateActionPerformed

    private void DonatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DonatebtnActionPerformed
        // TODO add your handling code here:
        
        String email = jLabel3.getText();

        String jdbcUrl = "jdbc:mysql://localhost:3306/bbms";
        String username = "root";
        String password = "adil";

        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
            String sql = "SELECT LastDonateDate from signup_table natural join userdetails where Email = ?";
            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setString(1, email);
                ResultSet rs = stmt.executeQuery();
                if (rs.next()) {
                    java.sql.Date registrationDate = rs.getDate("LastDonateDate");
                    if (registrationDate != null) {
                        LocalDate today = LocalDate.now();
                        LocalDate regDate = registrationDate.toLocalDate();
                        long daysDifference = today.toEpochDay() - regDate.toEpochDay();
                        if (daysDifference > 45) {
                            System.out.println("The registration date is more than 45 days ago.");
                            //JOptionPane.showMessageDialog(null, "Congratulations! you are able to donate...");
                             String selectQuery = "SELECT COUNT(*) FROM donation_requests WHERE email = ?";
                            PreparedStatement selectStmt = connection.prepareStatement(selectQuery);
                            selectStmt.setString(1, email);
                            ResultSet resultSet = selectStmt.executeQuery();
                            resultSet.next();
                            int count = resultSet.getInt(1);
                            if (count == 0) {
                                // Email not present, proceed with donation request
                                String insertQuery = "INSERT INTO donation_requests (Email,message) VALUES (?,?)";
                                PreparedStatement insertStmt = connection.prepareStatement(insertQuery);
                                insertStmt.setString(1, email);
                                String donationMessage = "I want to donate!";
                                insertStmt.setString(2, donationMessage);
                                int rowsAffected = insertStmt.executeUpdate();

                                if (rowsAffected > 0) {
                                    JOptionPane.showMessageDialog(null, "Donation request saved successfully!");
                                }else {
                                    JOptionPane.showMessageDialog(null, "Error saving donation request.");
                                }
                                insertStmt.close();
                               }
                    
                            else {
                                JOptionPane.showMessageDialog(null, "You have already requested.");
                            }
                    
                        } else {
                            System.out.println("The registration date is within 45 days.");
                            JOptionPane.showMessageDialog(null, "SORRY! you are not be able to donate...");
                            //JOptionPane.showMessageDialog(null, "SORRY! you are not be able to donate...");
                        }
                    } else {
                        System.out.println("The registration date is null.");
                        //JOptionPane.showMessageDialog(null, "Congratulations! you are able to donate...");
                        System.out.println("The registration date is more than 45 days ago.");
                            //JOptionPane.showMessageDialog(null, "Congratulations! you are able to donate...");
                             String selectQuery = "SELECT COUNT(*) FROM donation_requests WHERE email = ?";
                            PreparedStatement selectStmt = connection.prepareStatement(selectQuery);
                            selectStmt.setString(1, email);
                            ResultSet resultSet = selectStmt.executeQuery();
                            resultSet.next();
                            int count = resultSet.getInt(1);
                            if (count == 0) {
                                // Email not present, proceed with donation request
                                String insertQuery = "INSERT INTO donation_requests (Email,message) VALUES (?,?)";
                                PreparedStatement insertStmt = connection.prepareStatement(insertQuery);
                                insertStmt.setString(1, email);
                                String donationMessage = "I want to donate!";
                                insertStmt.setString(2, donationMessage);
                                int rowsAffected = insertStmt.executeUpdate();

                                if (rowsAffected > 0) {
                                    JOptionPane.showMessageDialog(null, "Donation request saved successfully!");
                                }else {
                                    JOptionPane.showMessageDialog(null, "Error saving donation request.");
                                }
                                insertStmt.close();
                               }
                    
                            else {
                                JOptionPane.showMessageDialog(null, "You have already requested.");
                            }
                    }
                } else {
                    System.out.println("No user found with the specified email.");
                }
            }
            // Clean up resources
            //foundData.close();
            //preparedStatement.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_DonatebtnActionPerformed

    private void PurchaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurchaseBtnActionPerformed
        // TODO add your handling code here:
         setVisible(false);
        purchaseForm a = new purchaseForm(jLabel3.getText());
        a.setVisible(true);
    }//GEN-LAST:event_PurchaseBtnActionPerformed

    private void NotificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NotificationActionPerformed
        // TODO add your handling code here:
        
        String emailToCheck =jLabel3.getText(); // Replace with the actual email
        String jdbcUrl = "jdbc:mysql://localhost:3306/bbms";
        String username = "root";
        String password = "adil";
        try {
            // Establish database connection
            Connection connection = DriverManager.getConnection(jdbcUrl, username, password);

            // Check if the email exists in the confirmation table
            String checkQuery = "SELECT COUNT(*) FROM donation_confirmation_table WHERE email = ?";
            PreparedStatement checkStmt = connection.prepareStatement(checkQuery);
            checkStmt.setString(1, emailToCheck);
            ResultSet resultSet = checkStmt.executeQuery();
            resultSet.next();
            int count = resultSet.getInt(1);

            if (count > 0) {
                System.out.println("You're available on confirmation!");
                int response = JOptionPane.showConfirmDialog(
            null,
            "Your Donation request has been accepted! Would you like to proceed? ",
            "Confirmation",
            JOptionPane.YES_NO_OPTION
                );

                if (response == JOptionPane.YES_OPTION) {
                    // User clicked Yes
                    System.out.println("Proceeding...");
                    try {
                        //Connection connection = DriverManager.getConnection(dbUrl, username, password);

                        // Specify the value to delete
                        //String valueToDelete = "your_value_here";

                        // Create the DELETE query
                        String deleteQuery = "DELETE FROM donation_confirmation_table WHERE Email = ?";
                        PreparedStatement statement = connection.prepareStatement(deleteQuery);
                        statement.setString(1, emailToCheck);
                        statement.executeUpdate();

                        System.out.println("Value '" + emailToCheck + "' deleted successfully.");

                        // Close resources
                        statement.close();
                        connection.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                   
                    JOptionPane.showMessageDialog(null, "Thank you for your participation,we can collect your blood.Please contact us.\n" +
"                        Contact:admin@gmail.com.\n" +
"                                01704080389");
                    
                } else {
                    // User clicked No
                    System.out.println("Cancelled.");
                    try {
                        //Connection connection = DriverManager.getConnection(dbUrl, username, password);

                        // Specify the value to delete
                        //String valueToDelete = "your_value_here";

                        // Create the DELETE query
                        String deleteQuery = "DELETE FROM donation_confirmation_table WHERE Email = ?";
                        PreparedStatement statement = connection.prepareStatement(deleteQuery);
                        statement.setString(1, emailToCheck);
                        statement.executeUpdate();

                        System.out.println("Value '" + emailToCheck + "' deleted successfully.");

                        // Close resources
                        statement.close();
                        connection.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    
                    } 

                    // Close resources
                    resultSet.close();
                    checkStmt.close();
                    connection.close();
                   }
            else {
                System.out.println("Not found in the confirmation table.");
                JOptionPane.showMessageDialog(null, "Sorry,you are not in the donation confirmation list.");
            }
        }catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_NotificationActionPerformed

    private void Notification1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Notification1ActionPerformed
        // TODO add your handling code here:
        String emailToCheck =jLabel3.getText(); // Replace with the actual email
        String jdbcUrl = "jdbc:mysql://localhost:3306/bbms";
        String username = "root";
        String password = "adil";
        try {
            // Establish database connection
            Connection connection = DriverManager.getConnection(jdbcUrl, username, password);

            // Check if the email exists in the confirmation table
            String checkQuery = "SELECT COUNT(*) FROM receiver_confrimation_table WHERE email = ?";
            PreparedStatement checkStmt = connection.prepareStatement(checkQuery);
            checkStmt.setString(1, emailToCheck);
            ResultSet resultSet = checkStmt.executeQuery();
            resultSet.next();
            int count = resultSet.getInt(1);

            if (count > 0) {
                System.out.println("You're available on confirmation!");
                int response = JOptionPane.showConfirmDialog(
            null,
            "Your Donation request has been accepted! Would you like to proceed? Click 'NO' if you don't need.",
            "Confirmation",
            JOptionPane.YES_NO_OPTION
                );

                if (response == JOptionPane.YES_OPTION) {
                    // User clicked Yes
                    System.out.println("Proceeding...");
                    try {
                        //Connection connection = DriverManager.getConnection(dbUrl, username, password);

                        // Specify the value to delete
                        //String valueToDelete = "your_value_here";

                        // Create the DELETE query
                        String deleteQuery = "DELETE FROM receiver_confrimation_table WHERE Email = ?";
                        PreparedStatement statement = connection.prepareStatement(deleteQuery);
                        statement.setString(1, emailToCheck);
                        statement.executeUpdate();

                        System.out.println("Value '" + emailToCheck + "' deleted successfully.");

                        // Close resources
                        statement.close();
                        connection.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                   
                    JOptionPane.showMessageDialog(null, "Congratulations,you can collect your needed blood.Please contact us.\n" +
"                        Contact:admin@gmail.com.\n" +
"                                01704080389");
                    
                } if(response == JOptionPane.NO_OPTION) {
                    // User clicked No
                    System.out.println("Cancelled.");
                    JOptionPane.showMessageDialog(null, "Youre cancellation is stored..");
                    try {
                        //Connection connection = DriverManager.getConnection(dbUrl, username, password);

                        // Specify the value to delete
                        //String valueToDelete = "your_value_here";

                        // Create the DELETE query
                        String deleteQuery = "DELETE FROM receiver_confrimation_table WHERE Email = ?";
                        PreparedStatement statement = connection.prepareStatement(deleteQuery);
                        statement.setString(1, emailToCheck);
                        statement.executeUpdate();

                        System.out.println("Value '" + emailToCheck + "' deleted successfully.");

                        // Close resources
                        statement.close();
                        connection.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    
                    } 

                    // Close resources
                    resultSet.close();
                    checkStmt.close();
                    connection.close();
                   }
            else {
                System.out.println("Your Not found in the Receiver confirmation table.");
                JOptionPane.showMessageDialog(null, "SORRY,,,Youre Not found in the Receiver confirmation list.");
            }
        }catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_Notification1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(donorhome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(donorhome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(donorhome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(donorhome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new donorhome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Donatebtn;
    private javax.swing.JButton Notification;
    private javax.swing.JButton Notification1;
    private javax.swing.JButton PurchaseBtn;
    private javax.swing.JButton checkValidityOfDonateDate;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
/*

try {
            // Establish database connection
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/bbms", "root", "AdilNeju");

            // Prepare the query
            String sql = "SELECT LastDonateDate from signup_table natural join userdetails where Email = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, emailToSearch);

            // Execute the query
            ResultSet foundData = preparedStatement.executeQuery();
            while (foundData.next()) {
                java.sql.Date dateSet = foundData.getDate("LastDonateDate");
                java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());

                // Calculate the difference in days
                long differenceInDays = (currentDate.getTime() - dateSet.getTime()) / (24 * 60 * 60 * 1000);

                if (differenceInDays > 45 || dateSet == null) {
                    System.out.println("The date in the database is more than 45 days older than today.");
                    JOptionPane.showMessageDialog(null, "Congratulations! you are able to donate...");
                }
                else {
                    System.out.println("The date in the database is within the last 45 days.");
                    JOptionPane.showMessageDialog(null, "SORRY! you are not be able to donate...");
                }
            }

            // Clean up resources
            foundData.close();
            preparedStatement.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }


try {
            // Establish database connection
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/bbms", "root", "AdilNeju");

            // Prepare the query
            String sql = "SELECT LastDonateDate from signup_table natural join userdetails where Email = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, emailToSearch);

            // Execute the query
            ResultSet foundData = preparedStatement.executeQuery();
            while (foundData.next()) {
                java.sql.Date dateSet = foundData.getDate("LastDonateDate");
                java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());

                // Calculate the difference in days
                long differenceInDays = (currentDate.getTime() - dateSet.getTime()) / (24 * 60 * 60 * 1000);

                if (differenceInDays > 45 || dateSet == null) {
                    
                   
                    String selectQuery = "SELECT COUNT(*) FROM donation_requests WHERE email = ?";
                    PreparedStatement selectStmt = connection.prepareStatement(selectQuery);
                    selectStmt.setString(1, emailToSearch);
                    ResultSet resultSet = selectStmt.executeQuery();
                    resultSet.next();
                    int count = resultSet.getInt(1);
                    if (count == 0) {
                        // Email not present, proceed with donation request
                        String insertQuery = "INSERT INTO donation_requests (Email,message) VALUES (?,?)";
                        PreparedStatement insertStmt = connection.prepareStatement(insertQuery);
                        insertStmt.setString(1, emailToSearch);
                        String donationMessage = "I want to donate!";
                        insertStmt.setString(2, donationMessage);
                        int rowsAffected = insertStmt.executeUpdate();
                        
                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(null, "Donation request saved successfully!");
                        }else {
                            JOptionPane.showMessageDialog(null, "Error saving donation request.");
                        }
                        insertStmt.close();
                    }
                    
                    else {
                        JOptionPane.showMessageDialog(null, "You have already requested.");
                    }
                    
                    
                    
                } else {
                    //System.out.println("The date in the database is within the last 45 days.");
                    JOptionPane.showMessageDialog(null, "SORRY! you are not be able to donate...");
                }
            }

            // Clean up resources
            foundData.close();
            preparedStatement.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

*/